<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>CS 1653 Project P3 Writeup</title>
  <style>
/* BEGIN CHANGES HERE */

/* In this section, you may add CSS styling if desired.
 * Be sure your writeup still prints legibly. */
header {
  text-align: center;
}

/* END CHANGES HERE */
  </style>
  <body>
    <header>
      <h1>CS 1653 Project P3 Writeup</h1>
      <h2>
<!-- BEGIN CHANGES HERE -->
Andrew Tran: ant111@pitt.edu, Blaise Kesler: blk56@pitt.edu, Jeremy Wertkin: jdw113@pitt.edu
<!-- END CHANGES HERE -->
      </h2>
    </header>
    <section id="overview">
      <h2>Overview</h2>
<!-- BEGIN CHANGES HERE -->

<p>In this section, broadly overview the types of cryptographic techniques that
your group has decided to use to address threats T1â€“T4.</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat1">
      <h2>Threat T1: Unauthorized Token Issuance</h2>
<!-- BEGIN CHANGES HERE -->

<p>In our project's current state, nothing is being done to prevent
unauthorized token issuance. The only proof that a group server requires
in order to issue a token is that the user logging in knows their own username.
The only way this could be secure is if we made the assumption that all
clients were trustworthy, but this can not be assumed. A user <em>a</em>
could have knowledge of another user <em>b</em>'s username, and use this
information to trick the group server into issuing <em>b</em>'s token to
<em>a</em>. This threat is extremely problematic. If unauthorized token
issuance is exploited, an attacker could impersonate the admin of a group
server or the owner of a group. This would give the attacker the ability to
steal information they should not have access to and disrupt the system by
doing things like deleting groups, users, and files. For our file sharing
system to be reliable and secure, it must be impossible to exploit the threat
of unauthorized token issuance.</p>

<p>Our solution to prevent exploiting unauthorized token issuance is to implement
a password based authentication system. Changes will need to be made so that the
initial user created when the group server starts for the first time will be given
a password. Whenever a user is created through a client, the new user will be
given a password along with their username. These passwords will not need to be
stored securely on the server, plaintext will suffice. If the group servers can
be trusted and the only attacker in our system is a passive adversary, there is no
reason to hash and salt passwords. The attacker would have to gain access to the
group server's file system in order to obtain the file storing passwords, and this
is not something a passive adversary can do.</p>

<p>To prevent a passive adversary from obtaining a user's password as it travels
along the network, we will be using hybrid cryptography to establish a secure
channel between the client and the group server. To do this, we will use 4096-bit
RSA key pairs and a 256-bit AES key. This should provide a level of encryption
that will be infeasible to break.</p>

<p>An attacker could encrypt an AES key with the user's public key, hijack the communication
between client and group server, and then send the compromised key to the user. The user
would think they are still talking to the server and send the attacker their password.
To prevent this, we could have the group server sign the symmetric key, but this is not a
valid attack in our current threat model, as we are only considering passive adversaries.</p>

<p>All together, our mechanism for preventing unauthorized token issuance will follow these steps:</p>
<ul>
    <li><em>k</em><sub>c</sub>: Client's public key</li>
    <li><em>k</em><sub>c</sub><sup>-1</sup>: Client's private key</li>
    <li><em>k</em><sub>gs</sub>: Group server's public key</li>
    <li><em>k</em><sub>gs</sub><sup>-1</sup>: Group server's private key
</ul>
<ol>
    <li>GS &rarr; C: <em>k</em><sub>gs</sub></li>
    <li>C &rarr; GS: <em>k</em><sub>c</sub></li>
    <li>GS generates a 256-bit AES key <em>k</em><sub>AES</sub></li>
	<li>GS &rarr; C: { <em>k</em><sub>AES</sub> }<em>k</em><sub>c</sub></li>
    <li>C decrypts <em>k</em><sub>AES</sub> with <em>k</em><sub>c</sub><sup>-1</sup></li>
    <li>C &rarr; GS: { username || password }<em>k</em><sub>AES</sub>
	<li>GS decrypts username and password with <em>k</em><sub>AES</sub></li>
    <li>GS checks password against user's recorded password</li>
    <li>GS &rarr; C: { token }<em>k</em><sub>AES</sub>, { H(token) }<em>k</em><sub>gs</sub><sup>-1</sup></li>
    <li>C decrypts token with <em>k</em><sub>AES</sub></li>
</ol>

<p>Assuming users are not willingly sharing passwords and we are only protecting
against passive adversaries, this mechanism protects against unauthorized token issuance in
a correct and secure way. The client and group server agree on a symmetric key
when the group server generates and sends it to the client. This key is only used
for this session and user. The client can trust that the symmetric key came from
the group server and was not modified along the way because there are only passive
adversaries in this threat model. The client can trust that no one else has the 
symmetric key because it was encrypted with the client's public key. After this,
all communication between the client and group server is protected through the
agreed upon symmetric key. For a passive adversary to listen in on the conversation,
he would have to either break the initial public key encryption of the symmetric key,
or brute force the symmetric key. With this mechanism in place, a passive adversary
would have to know a victim's password in order to impersonate them and
obtain their token. This could only happen through the victim's own negligence, or by
recording the victims encrypted password and performing an offline attack on the
256-bit AES encryption.</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat2">
      <h2>Threat T2: Token Modification/Forgery</h2>
<!-- BEGIN CHANGES HERE -->

<p>Token modification or forgery would invalidate the work we will do
to prevent unauthorized token issuance. Currently, there is no way to
prove that a token originated from a group server and has not been
modified. An attacker could either forge a token or modify a
legitimate token to give themselves access to other group's files
and higher privileges in the group server. This is problematic if we
assume that the clients are not trustworthy.</p>

<p>Our solution to this problem will be based on digital signatures.
The group server will generate a 4096-bit RSA key pair the first time
it is started. Anytime the group server sends an encrypted token to a
client, the group server will also send a digital signature of the hash
of the token. Hashing the token before signing allows it to be transmitted
in plaintext and puts an upper limit on the size for RSA encryption.
The token will be hashed using SHA-256, we need to use a cryptographically
strong hashing algorithm so that it is infeasible to forge a token that has
an identical hash to genuine token. The UserToken interface will be extended
so that it can verify that a token can be trusted. This will be done by
verifying the signature using the group server's public key.</p>

<p>For a file server to be able to verify a token, the file server must
have a list of trusted group server public keys. The file server cannot
rely on the client to send the group server's public key along with the
signature, because the client could generate their own signature and send
their own public key. Therefore, the file server admin will have to create
a file of trusted group server public keys by contacting group server admins.
These trusted keys will then be used to verify the signature of the token.
If no trusted keys match, then the file server should reject the token.</p>

<ul>
	<li><em>k</em><sub>gs</sub><sup>-1</sup>: Group server's private key</li>
    <li><em>k</em><sub>AES</sub>: Shared key between client and file server,
      different from key shared between client and group server</li>
</ul>
<ol>
    <li>C &rarr; FS: { token }<em>k</em><sub>AES</sub>, { H(token) }<em>k</em><sub>gs</sub><sup>-1</sup></li>
	<li>FS attempts to verify { H(token) }<em>k</em><sub>gs</sub><sup>-1</sup> using list of trusted group server public keys</li>
	<li>If FS successfully verifies signature, then FS accepts the token</li>
</ol>

<p>This mechanism for preventing token modification and forgery allows file
servers to verify that the token they received from a client was made by, and was
not modified after leaving, a trusted group server. The only downside to this
approach is that the server admins will need to communicate to get a group
server's public key. However, the only other option is to have the client pass it
on, and we cannot trust that the client will send the group server's public key.
If the file server is able to verify a token's signature, it should completely
trust the authenticity of that token. There is no way a client could have sent
a modified token if the file server is able to verify the signature using a
trusted group server's public key.</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat3">
      <h2>Threat T3: Unauthorized File Servers</h2>
<!-- BEGIN CHANGES HERE -->

<!-- 
<p>Begin this section by describing threat T3. This may include describing
examples of the threat being exploited by an adversary, a short discussion of
why this threat is problematic and needs to be addressed, and/or diagrams
showing how the threat might manifest in your groupâ€™s insecure
implementation.</p> 
-->

<p>In the project's current build, there is no way to authenticate the file server 
that a user is connecting to, the user simply trusts the machine it's connected to 
is the real file server. The only requirement for a user to connect to a server is 
the IP address and port number of the server. This is not secure because without 
some way to authenticate the server, an attacker can intercept the traffic from a 
user, or multiple users, going to the server through a man-in-the-middle attack. 
By intercepting the traffic, an attacker could impersonate the file server by 
spoofing their IP to match the actual file server. Since users prove their group 
membership using tokens given by the group server, a consequence of an attacker 
impersonating the file server would be stolen user tokens. If a user sends their 
token to an attacker believing they were communicating with the real file server, 
the attacker could take those tokens and send them to the file server impersonating a 
user and giving them access to the user's group files. Users would also accept any 
file the attacker sends. For example, the attacker could send a malicious file with the 
same name as the one the user requested to trick them into opening it.
</p>

<!--
<p>Next, provide a short description of the mechanism that you chose to
implement to protect against this threat. For interactive protocols, it would be
helpful to provide a diagram explaining the messages exchanged between
participating principals (use html &lt;img&gt; tag to import such images). Be
sure to explain any cryptographic choices that your group makes: What types of
algorithms, modes of operation, and/or key lengths did you choose? Why? If
shared keys are needed, how are they exchanged?</p>  
-->

<p>
To prevent the issues explained above, we will use a public key authentication 
system similar to SSH using a 4096-bit RSA key pair to authenticate the file server. 
On the initial connection to a file server, the user will request the server's public 
key. The host the user is connected to will send their public key and the user must 
decide whether or not to trust the key. Confirming the validity of the given key 
should be done through another secure channel, like directly contacting the file server admin. 
If the user chooses to trust the key, then the key will be saved locally. If the next time
the user connects to the file server a different key is returned, the client will know
not to trust that file server. After ensuring the public key can be trusted,
a series of 3 challenges (a 256-bit random nonce encrypted with the public key) are sent to 
the host from the user. For each challenge, the host must decrypt the challenge using 
their private key and send the decrypted nonce back to the user. If the nonces sent from the host 
match the nonces that the user generated for each challenge, the user can be confident 
that the host they are connected to is the real file server. 
</p>

<ul>
    <li><em>k</em><sub>fs</sub>: File server's public key</li>
    <li><em>k</em><sub>fs</sub><sup>-1</sup>: File server's private key
	<li><em>r</em>: 256-bit Random nonce</li>
</ul>
<ol>
    <li>FS &rarr; C: <em>k</em><sub>fs</sub></li>
	<li>C decides whether or not to trust <em>k</em><sub>fs</sub></li>
	<li>C generates r</li>
    <li>C &rarr; FS: { <em>r</em> }<em>k</em><sub>fs</sub></li>
	<li>FS decrypts { <em>r</em> }<em>k</em><sub>fs</sub> with <em>k</em><sub>fs</sub><sup>-1</sup></li>
	<li>FS &rarr; C: <em>r</em></li>
    <li>C checks for correct <em>r</em></li>
	<li>Repeat steps 3-7 2 more times</li>
</ol>

<!--
<p>Finally, provide a short argument addressing why your proposed mechanism
sufficiently addresses this particular threat. This argument should address the
correctness of your approach, as well as its overall security. For example, if
your mechanism involves a key agreement or key exchange protocol, you should
argue that both parties agree on the same key (correctnes) and that no other
party can figure out the key (security).</p>
-->

<p>
The only point of weakness in this mechanism is that a different secure channel is 
needed to validate the key and is also not required to do so. If the file server and 
the user have not already established a shared symmetric key or if the user doesn't 
already know the server's public key, there isn't a way to exchange this information 
that is secure against an active attacker. Relying on another secure channel and 
hoping users will personally verify public keys is the best we can do. So, if we 
assume all users will verify public keys before trusting them, this mechanism will 
allow users to be confident that the host they are connected to is the real file server. 
The challenge system is a zero-knowledge proof that allows the file server to prove 
they know the private key that matches the trusted public key. We run this challenge 
3 times to make sure an attacker didn't just guess <em>r</em>. It would be very unlikely 
to guess <em>r</em> correctly once, but guessing correctly 3 times is statistically impossible. 
The file server does not need to re-encrypt <em>r</em> when replying to the user's challenge 
because even if an attacker saved these values, a replay attack would not be possible 
because <em>r</em> should be generated randomly and should never be reused. Also, since 
a public key system is being used to encrypt <em>r</em>, a chosen plaintext attack does 
not provide any information about the server's private key so we do not need to worry 
about sending plaintext.
</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat4">
      <h2>Threat T4: Information Leakage via Passive Monitoring</h2>
<!-- BEGIN CHANGES HERE -->


<p>In the current state of the project, all communication between the client and server applications 
is unencrypted.  This means that any communication can be observed through passive monitoring.  This 
is problematic because the clients actions and information could be stolen by intercepting the 
communication between the client and server.  This would give the attacker access to file contents, 
UserTokens, as well as a log of actions performed by the client.  With this information, the entire 
system would be compromised because an attacker could do any action they wish by simply listening to the 
communications between client and servers.</p>

<p>Our solution to the problem is to encrypt all communication done between the client and servers.  
We will use hybrid cryptography to set up secure communication between the client and servers.  
This will be done using 4096-bit RSA key pairs and a 256-bit AES key.  These key lengths will provide a 
level of security that is impossible to break, thus ensuring secure communication.  The exchange of the 
AES shared key will be done using the  RSA key pairs according to the diagram below:</p>

<p> For creating a shared key between fileserver and client, assuming the process in T3
has already happened.<p>
<ul>
    <li><em>k</em><sub>c</sub>: Client's public key</li>
    <li><em>k</em><sub>c</sub><sup>-1</sup>: Client's private key</li>
</ul>
<ol>
    <li>C &rarr; FS: <em>k</em><sub>c</sub></li>
    <li>FS generates a 256-bit AES key <em>k</em><sub>AES</sub></li>
	<li>FS &rarr; C: { <em>k</em><sub>AES</sub> }<em>k</em><sub>c</sub></li>
    <li>C decrypts <em>k</em><sub>AES</sub> with <em>k</em><sub>c</sub><sup>-1</sup></li>
</ol>

<p>This mechanism for preventing information leakage via passive monitoring ensures that all 
communication is secure.  Both the client and server agree on the same shared AES key.  
They establish this key in a secure way by encrypting their communication with RSA.  
The key sizes are also large enough that it is infeasible to decrypt any communication 
stolen through passive monitoring. Finally, this mechanism assumes that the file server can
be trusted, as this is covered in T3 and is assumed to have already occurred.</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="discussion">
      <h2>Discussion</h2>
<!-- BEGIN CHANGES HERE -->

<p>Conclude with a paragraph or two discussing the interplay between your
proposed mechanisms, and commenting on the design process that your group
followed. Did you discuss other ideas that didnâ€™t pan out before settling on the
above-documented approach? Did you end up designing a really interesting
protocol suite that addresses multiple threats at once? Use this space to show
off your hard work!</p>

<p>If your group did any extra credit, please discuss that in this section, as
well.</p>

<!-- END CHANGES HERE -->
    </section>
  </body>
</html>
