<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>CS 1653 Project P3 Writeup</title>
  <style>
/* BEGIN CHANGES HERE */

/* In this section, you may add CSS styling if desired.
 * Be sure your writeup still prints legibly. */
header {
  text-align: center;
}

/* END CHANGES HERE */
  </style>
  <body>
    <header>
      <h1>CS 1653 Project P3 Writeup</h1>
      <h2>
<!-- BEGIN CHANGES HERE -->
Andrew Tran: ant111@pitt.edu, Blaise Kesler: blk56@pitt.edu, Jeremy Wertkin: jdw113@pitt.edu
<!-- END CHANGES HERE -->
      </h2>
    </header>
    <section id="overview">
      <h2>Overview</h2>
<!-- BEGIN CHANGES HERE -->

<p>We will be using passwords to authenticate users with the group
server (T1). RSA signatures will allow us to ensure that a token has not been
forged or modified (T2). Public key fingerprinting and zero-knowledge
proofs gives the client the ability to authenticate a file server (T3).
A combination of public key encryption using 4096-bit RSA and symmetric key
encryption using 256-bit AES allows the client to securely communicate with
the group and file server (T4).</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat1">
      <h2>Threat T1: Unauthorized Token Issuance</h2>
<!-- BEGIN CHANGES HERE -->

<p>In our project's current state, nothing is being done to prevent
unauthorized token issuance. The only proof that a group server requires
in order to issue a token is that the user logging in knows their own username.
The only way this could be secure is if we made the assumption that all
clients were trustworthy, but this can not be assumed. A user <em>a</em>
could have knowledge of another user <em>b</em>'s username, and use this
information to trick the group server into issuing <em>b</em>'s token to
<em>a</em>. This threat is extremely problematic. If unauthorized token
issuance is exploited, an attacker could impersonate the admin of a group
server or the owner of a group. This would give the attacker the ability to
steal information they should not have access to and disrupt the system by
doing things like deleting groups, users, and files. For our file sharing
system to be reliable and secure, it must be impossible to exploit the threat
of unauthorized token issuance.</p>

<p>Our solution to prevent exploiting unauthorized token issuance is to implement
a password based authentication system. Changes will need to be made so that the
initial user created when the group server starts for the first time will be given
a password. Whenever a user is created through a client, the new user will be
given a password along with their username. These passwords will not need to be
stored securely on the server, plaintext will suffice. If the group servers can
be trusted and the only attacker in our system is a passive adversary, there is no
reason to hash and salt passwords. The attacker would have to gain access to the
group server's file system in order to obtain the file storing passwords, and this
is not something a passive adversary can do.</p>

<p>To prevent a passive adversary from obtaining a user's password as it travels
along the network, we will be using hybrid cryptography to establish a secure
channel between the client and the group server. To do this, we will use 4096-bit
RSA key pairs and a 256-bit AES key. This should provide a level of encryption
that will be infeasible to break.</p>

<p>An attacker could encrypt an AES key with the user's public key, hijack the communication
between client and group server, and then send the compromised key to the user. The user
would think they are still talking to the server and send the attacker their password.
To prevent this, we could have the group server sign the symmetric key, but this is not a
valid attack in our current threat model, as we are only considering passive adversaries.</p>

<p>All together, our mechanism for preventing unauthorized token issuance will follow these steps:</p>
<ul>
    <li><em>k</em><sub>c</sub>: Client's public key</li>
    <li><em>k</em><sub>c</sub><sup>-1</sup>: Client's private key</li>
    <li><em>k</em><sub>gs</sub>: Group server's public key</li>
    <li><em>k</em><sub>gs</sub><sup>-1</sup>: Group server's private key
</ul>
<ol>
    <li>GS &rarr; C: <em>k</em><sub>gs</sub></li>
    <li>C &rarr; GS: <em>k</em><sub>c</sub></li>
    <li>GS generates a 256-bit AES key <em>k</em><sub>AES</sub></li>
	<li>GS &rarr; C: { <em>k</em><sub>AES</sub> }<em>k</em><sub>c</sub></li>
    <li>C decrypts <em>k</em><sub>AES</sub> with <em>k</em><sub>c</sub><sup>-1</sup></li>
    <li>C &rarr; GS: { username || password }<em>k</em><sub>AES</sub>
	<li>GS decrypts username and password with <em>k</em><sub>AES</sub></li>
    <li>GS checks password against user's recorded password</li>
	<li>GS &rarr; C: { token || { H(token.toString()) }<em>k</em><sub>gs</sub><sup>-1</sup> }<em>k</em><sub>AES</sub></li>
    <li>C decrypts token with <em>k</em><sub>AES</sub></li>
</ol>

<p>Assuming users are not willingly sharing passwords and we are only protecting
against passive adversaries, this mechanism protects against unauthorized token issuance in
a correct and secure way. The client and group server agree on a symmetric key
when the group server generates and sends it to the client. This key is only used
for this session and user. The client can trust that the symmetric key came from
the group server and was not modified along the way because there are only passive
adversaries in this threat model. The client can trust that no one else has the 
symmetric key because it was encrypted with the client's public key. After this,
all communication between the client and group server is protected through the
agreed upon symmetric key. For a passive adversary to listen in on the conversation,
he would have to either break the initial public key encryption of the symmetric key,
or brute force the symmetric key. With this mechanism in place, a passive adversary
would have to know a victim's password in order to impersonate them and
obtain their token. This could only happen through the victim's own negligence, or by
recording the victims encrypted password and performing an offline attack on the
256-bit AES encryption.</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat2">
      <h2>Threat T2: Token Modification/Forgery</h2>
<!-- BEGIN CHANGES HERE -->

<p>Token modification or forgery would invalidate the work we will do
to prevent unauthorized token issuance. Currently, there is no way to
prove that a token originated from a group server and has not been
modified. An attacker could either forge a token or modify a
legitimate token to give themselves access to other group's files
and higher privileges in the group server. This is problematic if we
assume that the clients are not trustworthy.</p>

<p>Our solution to this problem will be based on digital signatures.
The group server will generate a 4096-bit RSA key pair the first time
it is started. Anytime the group server sends an encrypted token to a
client, the group server will also send a digital signature of the hash
of the token's toString output. 
The token's toString output will be hashed using SHA-256, we need to use a cryptographically
strong hashing algorithm so that it is infeasible to forge a token that has
an identical hash to genuine token. The token's toString method will return a unique
string representation of the token in the following format:
issuer:subject:group<sub>1</sub>:[...]:group<sub>n</sub>. This toString method could be
abused if we allowed the ':' character to be used in group server names, usernames, or group
names, so it will have to be banned from being used for those identifiers.
The UserToken interface will be extended so that it can verify that a token can be trusted.
This will be done by verifying the signature using the group server's public key.</p>

<p>For a file server to be able to verify a token, the file server must
have a list of trusted group server public keys. The file server cannot
rely on the client to send the group server's public key along with the
signature, because the client could generate their own signature and send
their own public key. Therefore, the file server admin will have to create
a file of trusted group server public keys by contacting group server admins.
Our file system is intended for situations where file and group servers admins 
can easily communicate offline, thus making our public key exchange protocol acceptable.
An example of such an environment is an office, where group and file server admins would most likely
be in the same building and could easily exchange public keys.
These trusted keys will then be used to verify the signature of the token.
If no trusted keys match, then the file server should reject the token.</p>

<ul>
	<li><em>k</em><sub>gs</sub><sup>-1</sup>: Group server's private key</li>
    <li><em>k</em><sub>AES</sub>: Shared key between client and file server,
      different from key shared between client and group server</li>
</ul>
<ol>
	<li>C &rarr; FS: { token || { H(token.toString()) }<em>k</em><sub>gs</sub><sup>-1</sup> }<em>k</em><sub>AES</sub></li>
	<li>FS attempts to verify { H(token.toString()) }<em>k</em><sub>gs</sub><sup>-1</sup> using list of trusted group server public keys</li>
	<li>If FS successfully verifies signature, then FS accepts the token</li>
</ol>

<p>This mechanism for preventing token modification and forgery allows file
servers to verify that the token they received from a client was made by, and was
not modified after leaving, a trusted group server. The only downside to this
approach is that the server admins will need to communicate to get a group
server's public key. However, the only other option is to have the client pass it
on, and we cannot trust that the client will send the group server's public key.
If the file server is able to verify a token's signature, it should completely
trust the authenticity of that token. There is no way a client could have sent
a modified token if the file server is able to verify the signature using a
trusted group server's public key.</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat3">
      <h2>Threat T3: Unauthorized File Servers</h2>
<!-- BEGIN CHANGES HERE -->

<p>In the project's current build, there is no way to authenticate the file server 
that a user is connecting to, the user simply trusts the machine it's connected to 
is the real file server. The only requirement for a user to connect to a server is 
the IP address and port number of the server. This is not secure because without 
some way to authenticate the server, an attacker can intercept the traffic from a 
user, or multiple users, going to the server through a man-in-the-middle attack. 
By intercepting the traffic, an attacker could impersonate the file server by 
spoofing their IP to match the actual file server. Since users prove their group 
membership using tokens given by the group server, a consequence of an attacker 
impersonating the file server would be stolen user tokens. If a user sends their 
token to an attacker believing they were communicating with the real file server, 
the attacker could take those tokens and send them to the file server impersonating a 
user and giving them access to the user's group files. Users would also accept any 
file the attacker sends. For example, the attacker could send a malicious file with the 
same name as the one the user requested to trick them into opening it.
</p>

<p>
To prevent the issues explained above, we will use a public key authentication 
system similar to SSH using a 4096-bit RSA key pair to authenticate the file server. 
On the initial connection to a file server, the user will request the server's public 
key. The host will send their public key to the user and a truncated hash of the key will be displayed to the user. The user must then
decide whether or not to trust the key. Confirming the validity of the given key 
should be done through another secure channel. If the user chooses to trust the key, 
a challenge is sent to the host from the user. This challenge will contain a random 256-bit nonce as well as a randomly generated AES key. The entire challenge is encrypted with the file server's public key. For each challenge, the host must decrypt the challenge using 
their private key, re-encrypt the random nonce using the AES key generated by the user, and send the re-encrypted nonce back to the user. The user will then decrypt using their AES key to extract the nonce sent from the host and if the nonce sent from the host 
matches the nonce that the user generated for the challenge, the user can be confident 
that the host they are connected to is the real file server. The user can then 
save the hash of the public key locally along with the IP address of the file server.
For every subsequent connection, if the hash value of the public key sent from the host matches a saved hash/IP public key verification is skipped.
</p>

<ul>
    <li><em>k</em><sub>fs</sub>: File server's public key</li>
    <li><em>k</em><sub>fs</sub><sup>-1</sup>: File server's private key</li>
	<li><em>k</em><sub>AES</sub>: AES Key</li>
	<li><em>r</em>: 256-bit Random nonce</li>
</ul>
<ol>
    <li>FS &rarr; C: <em>k</em><sub>fs</sub></li>
	<li>C decides whether or not to trust <em>k</em><sub>fs</sub></li>
	<li>C generates r</li>
	<li>C generates <em>k</em><sub>AES</sub></li>
    <li>C &rarr; FS: { <em>r</em> || <em>k</em><sub>AES</sub> }<em>k</em><sub>fs</sub></li>
	<li>FS decrypts { <em>r</em> || <em>k</em><sub>AES</sub> }<em>k</em><sub>fs</sub> with <em>k</em><sub>fs</sub><sup>-1</sup></li>
	<li>FS &rarr; C: { <em>r</em> }<em>k</em><sub>AES</sub></li>
	<li>C decrypts { <em>r</em> }<em>k</em><sub>AES</sub> with <em>k</em><sub>AES</sub></li>
    <li>C checks for correct <em>r</em></li>
</ol>

<p>
The only point of weakness in this mechanism is that a different secure channel is 
needed to validate the key and is also not required to do so. If the file server and 
the user have not already established a shared symmetric key or if the user doesn't 
already know the server's public key, there isn't a way to exchange this information 
that is secure against an active attacker. Relying on another secure channel and 
hoping users will personally verify public keys is the best we can do. So, if we 
assume all users will verify public keys before trusting them, this mechanism will 
allow users to be confident that the host they are connected to is the real file server.
We can assume that the user has a secure means of communicating with the file server admin 
because if these hosts have agreed to share files, they should have another channel to communicate.
The challenge system is a zero-knowledge proof that allows the file server to prove 
they know the private key that matches the trusted public key. Only the file server 
(who knows <em>k</em><sub>fs</sub><sup>-1</sup>) and the user will know the <em>k</em><sub>AES</sub>
for the session so there is no way a man-in-the-middle can impersonate the file server.
</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat4">
      <h2>Threat T4: Information Leakage via Passive Monitoring</h2>
<!-- BEGIN CHANGES HERE -->

<p>In the current state of the project, none of the communication between the client and server applications 
is encrypted. This means that all communication can be observed through passive monitoring. This 
is problematic because the client's actions and information could be stolen by intercepting the 
communication between the client and server. This would give the attacker access to file contents, 
UserTokens, as well as a log of actions performed by the client. With this information, the entire 
system would be compromised because an attacker could do any action they wish by simply listening to the 
communications between client and servers.</p>

<p>Our solution to the problem is to encrypt all communication done between the client and servers.  
We will use symmetric key cryptography to encrypt communication between the client and servers.  
This will be done using a 256-bit AES key. These key lengths will provide a 
level of security that is infeasible to break, thus ensuring secure communication. The protocol for
exchanging the symmetric key between the client and file server was shown in T3. Below is a diagram showing
how messages are exchanged between the client and file servers:</p>

<ul>
    <li><em>k</em><sub>cf</sub>: Client and File Server's Shared AES Key</li>
    <li>M1,M2: Messages</li>
</ul>
<ol>
    <li>C &rarr; FS:{ M1 }<em>k</em><sub>cf</sub></li>
    <li>FS decrypts M1 with <em>k</em><sub>cf</sub></li>
	<li>FS &rarr; C: { M2 }<em>k</em><sub>cf</sub></li>
    <li>C decrypts M2 with <em>k</em><sub>cf</sub></li>
</ol>

<p>This mechanism for preventing information leakage via passive monitoring ensures that all 
communication is secure. Both the client and file server encrypt all their communication with their shared AES key.  
They establish this key when the client verifies the file server in T3.  
These keys are thrown away on disconnect and new keys are generated at
the start of the next session.
The key size is large enough that it is infeasible to decrypt any communication 
stolen through passive monitoring. </p>

<!-- END CHANGES HERE -->
    </section>
    <section id="discussion">
      <h2>Discussion</h2>
<!-- BEGIN CHANGES HERE -->

<p>Our protocol to prevent token modification is a good example of the
interplay between our mechanisms. First, the client would have to authenticate
with the group server in order to obtain a token. This involves the entire
protocol in T1. Then, the client would have to authenticate the
file server using the process outlined in T3. Next, the client and 
file server would need to agree on a symmetric key, which is shown in T4.
Finally, the client can decrypt the token using the symmetric key from the
group server, encrypt it using the symmetric key from the file server, and
send the encrypted token and the signature to the file server.</p>

<p>Before beginning this writeup, our group met up and discussed solutions to
all the threats. Once we thought we had a solution, we tried to identify assumptions we were making
and attacks that could break the protocol. The issue with this is that we were not only
considering passive adversaries. During these discussions, we created a much
stronger protocol to prevent unauthorized token issuance than the protocol used in T1.
It involved salting and hashing passwords to protect the password database and 
RSA signatures to prove that the AES key came from the group server, not a man
in the middle. After writing up this protocol, we realized that we were overthinking
this portion of the project. We continued to discuss, making sure that we were
not protecting against threats that don't exist in the current model.</p>

<!-- END CHANGES HERE -->
    </section>
  </body>
</html>
